/**
 * Author: justin0u0<mail@justin0u0.com>
 * Problem: https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/
 * Runtime: 88ms
 * Description:
 *  dp(i): for prices[0:i], sell at day i
 *  => dp(i)=prices[i]-fee+max{dp(j)-prices[k]}, for all j < k < i,
 *  => observe that everytime i increase by 1, we got a new `prices[k]` (let says, k'=i-1),
 *      for all max{dp(j)-prices[k]} generated by prices[k'],
 *      max{dp(j)-prices[k]}=max{dp(j)}-prices[k']
 *  => observe that everytime i increase by 1, we go a new `dp(j)` (let says, j'=i-2),
 *      maintain a variable `maxDp` for max{dp(j)},
 *      everytime i increase by 1, update `maxDp` with dp(j')
 *  => maintain another varialbe `best` for max{dp(j)-prices[k]},
 *      everytime i increase by 1, update `best` with prices[k']
 */

class Solution {
public:
  int maxProfit(vector<int>& prices, int fee) {
    int maxDp = 0, best = -0x3f3f3f3f;
    int dp0, dp1; // dp0 = dp(i), dp1 = dp(i-1)
    for (int& price : prices) {
      dp0 = price - fee + best;
      maxDp = max(maxDp, dp1);
      best = max(best, maxDp - price);
      dp1 = dp0;
    }
    return max(maxDp, dp1);
  }
};

